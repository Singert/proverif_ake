(* === 类型定义 === *)
type exp.
type group.
type sessionkey.
type skey.     (* 非对称解密私钥 *)
type pkey.     (* 非对称加密公钥 *)
type sskey.    (* 签名私钥 *)
type spkey.    (* 签名公钥 *)

(* === 原始函数定义 === *)
fun g_exp(group, exp): group.
fun mult(group, group): group.
fun exp_add(exp, exp): exp.
fun encode_group(group): bitstring.
fun h(bitstring): sessionkey.

(* === 加解密与签名函数 === *)
fun pk(skey): pkey.
fun spk(sskey): spkey.
fun asymenc(bitstring, pkey): bitstring.
fun asymdec(bitstring, skey): bitstring.
fun sign(bitstring, sskey): bitstring.
fun checksig(bitstring, spkey): bitstring.

(* === 代数等式 === *)
equation forall G: group, x: exp, y: exp;
  mult(g_exp(G, x), g_exp(G, y)) = g_exp(G, exp_add(x, y)).
equation forall m: bitstring, k: skey;
  asymdec(asymenc(m, pk(k)), k) = m.
equation forall m: bitstring, k: sskey;
  checksig(sign(m, k), spk(k)) = m.

(* === 公共信道和常量 === *)
free c: channel.
free g: group.
free A_ID, B_ID: bitstring.

(* === 公私钥对 === *)
free skA: skey [private].
free pkA: pkey.
free skB: skey [private].
free pkB: pkey.

free skAS: sskey [private].
free pkAS: spkey.
free skBS: sskey [private].
free pkBS: spkey.

(* === 事件定义 === *)
event beginA(bitstring, bitstring, sessionkey).
event endA(bitstring, sessionkey).
event beginB(bitstring).
event endB(bitstring, bitstring, sessionkey).

(* === 查询定义 === *)
query x: sessionkey; attacker(x).

query na: bitstring, nb: bitstring, sk: sessionkey;
  event(endB(na, nb, sk)) ==> event(beginA(na, nb, sk)).

query a_id: bitstring, b_id: bitstring, sk: sessionkey;
  event(endA(b_id, sk)) ==> event(endB(a_id, b_id, sk)).

(* === A 过程 === *)
let A =
  new a: exp;
  let A_pub = g_exp(g, a) in
  let sigA = sign(encode_group(A_pub), skAS) in

  out(c, A_ID);
  out(c, sigA);
  out(c, A_pub);

  in(c, B_pub: group);
  in(c, sigB: bitstring);

  let verifiedB = checksig(sigB, pkBS) in

  if verifiedB = encode_group(B_pub) then
    let sk = h(encode_group(mult(B_pub, A_pub))) in
    event beginA(A_ID, encode_group(B_pub), sk);
    event endA(encode_group(B_pub), sk).

(* === B 过程 === *)
let B =
  new b: exp;
  let B_pub = g_exp(g, b) in
  let sigB = sign(encode_group(B_pub), skBS) in

  in(c, aid: bitstring);
  in(c, sigA: bitstring);
  in(c, A_pub: group);

  let verifiedA = checksig(sigA, pkAS) in

  if verifiedA = encode_group(A_pub) then
    out(c, B_pub);
    out(c, sigB);

    let sk = h(encode_group(mult(A_pub, B_pub))) in
    event beginB(encode_group(A_pub));
    event endB(aid, encode_group(B_pub), sk).

(* === 主进程 === *)
process
  (!A) | (!B)
