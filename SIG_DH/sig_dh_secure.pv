(* === 开启攻击路径输出 === *)
set traceDisplay = long.

(* === A 的身份常量 === *)
const A_ID: bitstring.

(* === 类型定义 === *)
type exp.                  (* DH 指数类型（私钥） *)
type group.                (* 群元素类型（如 g^x） *)
type sessionkey.           (* 会话密钥类型 *)
type skey.                 (* 签名私钥类型 *)
type pkey.                 (* 签名公钥类型 *)
type skey_enc.             (* 非对称加密私钥类型 *)
type pkey_enc.             (* 非对称加密公钥类型 *)

(* === 群生成元 === *)
free g: group.

(* === 编码函数 === *)
fun encode_group(group): bitstring.

(* === 公钥函数 === *)
fun pk(skey): pkey.
fun pk_enc(skey_enc): pkey_enc.

(* === 签名函数与验证 === *)
fun sign(bitstring, skey): bitstring.
fun checksig(bitstring, pkey): bitstring.
equation forall m: bitstring, sk: skey;
  checksig(sign(m, sk), pk(sk)) = m.

(* === 非对称加解密函数 === *)
fun asymenc(bitstring, pkey_enc): bitstring.
fun asymdec(bitstring, skey_enc): bitstring.
equation forall m: bitstring, k: skey_enc;
  asymdec(asymenc(m, pk_enc(k)), k) = m.

(* === DH 安全共享函数 === *)
fun g_exp(group, exp): group.
fun exp_add(exp, exp): exp.
fun shared_dh(exp, group): group [private].
equation forall G: group, x: exp, y: exp;
  shared_dh(x, g_exp(G, y)) = g_exp(G, exp_add(x, y)).


(* === 会话密钥导出函数 === *)
fun h(group): sessionkey.

(* === 构造器与解构器 === *)
fun pair(bitstring, bitstring): bitstring.
fun proj1(bitstring): bitstring.
fun proj2(bitstring): bitstring.
equation forall x: bitstring, y: bitstring;
  proj1(pair(x, y)) = x.
equation forall x: bitstring, y: bitstring;
  proj2(pair(x, y)) = y.

(* === 通信信道 === *)
free c: channel.

(* === 密钥定义 === *)
free pkA: pkey.
free skA: skey [private].
free pkB: pkey.
free skB: skey [private].
free pkB_enc: pkey_enc.
free skB_enc: skey_enc [private].

(* === 事件定义 === *)
event beginA(bitstring, bitstring, sessionkey).
event endA(bitstring, sessionkey).
event beginB(bitstring).
event endB(bitstring, bitstring, sessionkey).

(* === 查询定义 === *)
query x: sessionkey; attacker(x).

query idA: bitstring, idB: bitstring, sk: sessionkey;
  event(endB(idA, idB, sk)) ==> event(beginA(idA, idB, sk)).

query a_id: bitstring, b_id: bitstring, sk: sessionkey;
  event(endA(b_id, sk)) ==> event(endB(a_id, b_id, sk)).

(* === A 的过程 === *)
let A =
  new a: exp;
  let A_pub = g_exp(g, a) in
  let sigA = sign(encode_group(A_pub), skA) in

  out(c, A_ID);
  out(c, sigA);
  out(c, A_pub);

  in(c, B_pub: group);
  in(c, sigB: bitstring);

  let verifiedB = checksig(sigB, pkB) in
  if verifiedB = encode_group(B_pub) then
    let shared = h(shared_dh(a, B_pub)) in
    event beginA(A_ID, encode_group(B_pub), shared);
    event endA(encode_group(B_pub), shared)
  else 0.

(* === B 的过程 === *)
let B =
  new b: exp;
  let B_pub = g_exp(g, b) in
  let sigB = sign(encode_group(B_pub), skB) in

  in(c, id: bitstring);
  in(c, sigA: bitstring);
  in(c, A_pub: group);

  let verified = checksig(sigA, pkA) in
  if verified = encode_group(A_pub) then
    let shared = h(shared_dh(b, A_pub)) in
    event beginB(encode_group(A_pub));
    out(c, B_pub);
    out(c, sigB);
    event endB(id, encode_group(B_pub), shared)
  else 0.

(* === 主进程 === *)
process
  (!A) | (!B)
