(* === 类型定义 === *)
type exp.
type group.
type sessionkey.
type skey.
type pkey.

(* === 函数定义 === *)
fun pk(skey): pkey.
fun g_exp(group, exp): group.
fun mult(group, group): group.
fun encode_group(group): bitstring.
fun decode_group(bitstring): group.
fun h(bitstring): sessionkey.

fun sign(bitstring, skey): bitstring.
fun checksig(bitstring, pkey): bitstring.
equation forall m: bitstring, sk: skey;
  checksig(sign(m, sk), pk(sk)) = m.

fun cert(bitstring, bitstring): bitstring.  (* 身份 + 公钥编码 *)

(* === 常量 === *)
free g: group.
free c: channel.

free A_ID, B_ID: bitstring.
free CA_pk: pkey.     (* CA 的公钥 *)
free skA, skB: skey [private].
free CA_sk: skey [private].  (* 仅 CA 拥有签名密钥 *)

(* === 事件定义 === *)
event beginA(bitstring, bitstring, sessionkey).
event endA(bitstring, sessionkey).
event beginB(bitstring).
event endB(bitstring, bitstring, sessionkey).

(* === 查询定义 === *)
query x: sessionkey; attacker(x).  (* 保密性 *)
query a: bitstring, b: bitstring, k: sessionkey;
    event(endA(b,k)) ==> event(beginB(a)).  (* A 接收到的密钥确实由 B 发起 *)
query a: bitstring, b: bitstring, k: sessionkey;
    event(endA(b,k)) ==> event(endB(a,b,k)).  (* 密钥一致性 *)

(* === 主进程 === *)
process
(
  (* A 侧 *)
  new a: exp;
  let A_pub = g_exp(g, a) in
  let A_pub_bits = encode_group(A_pub) in
  let certA = cert(A_ID, A_pub_bits) in
  let sig_certA = sign(certA, CA_sk) in  (* 由 CA 签名 *)

  out(c, A_ID);
  out(c, A_pub_bits);
  out(c, sig_certA);

  in(c, B_ID_recv: bitstring);
  in(c, B_pub_bits_recv: bitstring);
  in(c, sig_certB_recv: bitstring);

  let certB_check = cert(B_ID_recv, B_pub_bits_recv) in
  let verified_certB = checksig(sig_certB_recv, CA_pk) in

  if verified_certB = certB_check then
    let B_pub = decode_group(B_pub_bits_recv) in
    let shared = h(encode_group(mult(B_pub, A_pub))) in
    event beginA(A_ID, B_ID_recv, shared);
    event endA(B_ID_recv, shared)
)

|

(
  (* B 侧 *)
  new b: exp;
  let B_pub = g_exp(g, b) in
  let B_pub_bits = encode_group(B_pub) in
  let certB = cert(B_ID, B_pub_bits) in
  let sig_certB = sign(certB, CA_sk) in  (* 由 CA 签名 *)

  in(c, A_ID_recv: bitstring);
  in(c, A_pub_bits_recv: bitstring);
  in(c, sig_certA_recv: bitstring);

  let certA_check = cert(A_ID_recv, A_pub_bits_recv) in
  let verified_certA = checksig(sig_certA_recv, CA_pk) in

  if verified_certA = certA_check then
    out(c, B_ID);
    out(c, B_pub_bits);
    out(c, sig_certB);

    let A_pub = decode_group(A_pub_bits_recv) in
    let shared = h(encode_group(mult(A_pub, B_pub))) in
    event beginB(A_ID_recv);
    event endB(A_ID_recv, B_ID, shared)
)
