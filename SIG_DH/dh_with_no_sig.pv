(*启用攻击路径输出*)
set traceDisplay = long.

(* === A 的身份常量 === *)
const A_ID: bitstring.

(* === 类型定义 === *)
type exp.                  (* DH 指数类型（私钥） *)
type group.                (* 群元素类型（如 g^x） *)
type sessionkey.           (* 会话密钥类型 *)
type skey.                 (* 签名私钥类型 *)
type pkey.                 (* 签名公钥类型 *)
type skey_enc.             (* 非对称加密私钥类型 *)
type pkey_enc.             (* 非对称加密公钥类型 *)

(* === 群生成元 === *)
free g: group.  (* 公共生成元 *)

(* === 编码函数 === *)
fun encode_group(group): bitstring.

(* === 公钥函数 === *)
fun pk(skey): pkey.
fun pk_enc(skey_enc): pkey_enc.

(* === 签名函数与验证 === *)
fun sign(bitstring, skey): bitstring.
fun checksig(bitstring, pkey): bitstring.
equation forall m: bitstring, sk: skey;
  checksig(sign(m, sk), pk(sk)) = m.

(* === 加解密函数 === *)
fun asymenc(bitstring, pkey_enc): bitstring.
fun asymdec(bitstring, skey_enc): bitstring.
equation forall m: bitstring, k: skey_enc;
  asymdec(asymenc(m, pk_enc(k)), k) = m.

(* === Diffie-Hellman 相关函数 === *)
fun g_exp(group, exp): group.
fun mult(group, group): group.
fun h(group): sessionkey.
fun exp_add(exp, exp): exp.
equation forall G: group, x: exp, y: exp;
  mult(g_exp(G, x), g_exp(G, y)) = g_exp(G, exp_add(x, y)).

(* === 构造器与解构器 === *)
fun pair(bitstring, bitstring): bitstring.
fun proj1(bitstring): bitstring.
fun proj2(bitstring): bitstring.
equation forall x: bitstring, y: bitstring;
  proj1(pair(x, y)) = x.
equation forall x: bitstring, y: bitstring;
  proj2(pair(x, y)) = y.

(* === 通信信道 === *)
free c: channel.

(* === A/B 的密钥定义 === *)
free pkA: pkey.
free skA: skey [private].
free pkB: pkey.
free skB: skey [private].
free pkB_enc: pkey_enc.
free skB_enc: skey_enc [private].

(* === 事件定义 === *)
event beginA(bitstring, bitstring, sessionkey).      (* A 发起协议：自己的身份、对方身份、公钥派生密钥 *)
event endA(bitstring, sessionkey).                   (* A 结束：记录对方身份与密钥 *)

event beginB(bitstring).                             (* B 开始接收 A 的公钥 *)
event endB(bitstring, bitstring, sessionkey).        (* B 结束：记录 A 身份、B 身份、密钥 *)

(* === 查询定义 === *)

(* 1. 保密性：攻击者是否能得到会话密钥 *)
query x: sessionkey; attacker(x).

(* 2. B <- A 的认证性：若 B 认为协商完成（endB），则一定有 A 发起了 beginA *)
query idA: bitstring, idB: bitstring, sk: sessionkey;
  event(endB(idA, idB, sk)) ==> event(beginA(idA, idB, sk)).

(* 3. 会话密钥一致性：若 A 完成密钥协商，则 B 也协商出了相同密钥 *)
query a_id: bitstring, b_id: bitstring, sk: sessionkey;
  event(endA(b_id, sk)) ==> event(endB(a_id, b_id, sk)).


(* === A 的过程 === *)
let A =
  new a: exp;
  let A_pub = g_exp(g, a) in
  let sigA = sign(encode_group(A_pub), skA) in

  out(c, A_ID);           (* 发送 A 的身份 *)
  out(c, sigA);           (* 发送签名（对 g^a 的签名） *)
  out(c, A_pub);          (* 发送公钥 g^a *)

  in(c, B_pub: group);    (* 接收 B 的公钥 g^b *)
  let shared = h(mult(B_pub, A_pub)) in

  event beginA(A_ID, encode_group(B_pub), shared);
  event endA(encode_group(B_pub), shared).

(* === B 的过程 === *)
let B =
  new b: exp;
  let B_pub = g_exp(g, b) in

  in(c, id: bitstring);        (* 接收 A 的身份 *)
  in(c, sigA: bitstring);      (* 接收 A 的签名 *)
  in(c, A_pub: group);         (* 接收 A 的公钥 *)

  let verified = checksig(sigA, pkA) in
  if verified = encode_group(A_pub) then
    let shared = h(mult(A_pub, B_pub)) in
    event beginB(encode_group(A_pub));
    out(c, B_pub);
    event endB(id, encode_group(B_pub), shared)
  else
    0.

(* === 主进程 === *)
process
  (!A) | (!B)
