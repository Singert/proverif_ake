(*启用攻击路径输出*)
set traceDisplay = long.

(* === A 的身份常量 === *)
const A_ID: bitstring.

(* === 类型定义 === *)
type exp.                  (* DH 指数类型（私钥） *)
type group.                (* 群元素类型（如 g^x） *)
type sessionkey.           (* 会话密钥类型 *)
type skey.                 (* 签名私钥类型 *)
type pkey.                 (* 签名公钥类型 *)
type skey_enc.             (* 非对称加密私钥类型 *)
type pkey_enc.             (* 非对称加密公钥类型 *)

(* === 群生成元 === *)
free g: group.  (* 公共生成元 *)

(* === 编码函数 === *)
fun encode_group(group): bitstring.

(* === 公钥函数 === *)
fun pk(skey): pkey.
fun pk_enc(skey_enc): pkey_enc.

(* === 签名函数与验证 === *)
fun sign(bitstring, skey): bitstring.
fun checksig(bitstring, pkey): bitstring.
equation forall m: bitstring, sk: skey;
  checksig(sign(m, sk), pk(sk)) = m.

(* === 加解密函数 === *)
fun asymenc(bitstring, pkey_enc): bitstring.
fun asymdec(bitstring, skey_enc): bitstring.
equation forall m: bitstring, k: skey_enc;
  asymdec(asymenc(m, pk_enc(k)), k) = m.

(* === Diffie-Hellman 相关函数 === *)
fun g_exp(group, exp): group.
fun mult(group, group): group.
fun h(group): sessionkey.
fun exp_add(exp, exp): exp.
equation forall G: group, x: exp, y: exp;
  mult(g_exp(G, x), g_exp(G, y)) = g_exp(G, exp_add(x, y)).

(* === 构造器与解构器 === *)
fun pair(bitstring, bitstring): bitstring.
fun proj1(bitstring): bitstring.
fun proj2(bitstring): bitstring.
equation forall x: bitstring, y: bitstring;
  proj1(pair(x, y)) = x.
equation forall x: bitstring, y: bitstring;
  proj2(pair(x, y)) = y.

(* === 通信信道 === *)
free c: channel.

(* === A/B 的密钥定义 === *)
free pkA: pkey.
free skA: skey [private].
free pkB: pkey.
free skB: skey [private].
free pkB_enc: pkey_enc.
free skB_enc: skey_enc [private].

(* === 事件定义 === *)
event beginA(bitstring, bitstring, sessionkey).      (* A 发起协议：自己的身份、对方身份、公钥派生密钥 *)
event endA(bitstring, sessionkey).                   (* A 结束：记录对方身份与密钥 *)

event beginB(bitstring).                             (* B 开始接收 A 的公钥 *)
event endB(bitstring, bitstring, sessionkey).        (* B 结束：记录 A 身份、B 身份、密钥 *)

(* === 查询定义 === *)

(* 1. 保密性：攻击者是否能得到会话密钥 *)
query x: sessionkey; attacker(x).

(* 2. B <- A 的认证性：若 B 认为协商完成（endB），则一定有 A 发起了 beginA *)
query idA: bitstring, idB: bitstring, sk: sessionkey;
  event(endB(idA, idB, sk)) ==> event(beginA(idA, idB, sk)).

(* 3. 会话密钥一致性：若 A 完成密钥协商，则 B 也协商出了相同密钥 *)
query a_id: bitstring, b_id: bitstring, sk: sessionkey;
  event(endA(b_id, sk)) ==> event(endB(a_id, b_id, sk)).


(* === A 的过程 === *)
let A =
  new a: exp;
  let A_pub = g_exp(g, a) in
  let sigA = sign(encode_group(A_pub), skA) in

  out(c, A_ID);           (* 发送 A 的身份 *)
  out(c, sigA);           (* 发送签名（对 g^a 的签名） *)
  out(c, A_pub);          (* 发送公钥 g^a *)

  in(c, B_pub: group);    (* 接收 B 的公钥 g^b *)
  let shared = h(mult(B_pub, A_pub)) in

  event beginA(A_ID, encode_group(B_pub), shared);
  event endA(encode_group(B_pub), shared).

(* === B 的过程 === *)
let B =
  new b: exp;
  let B_pub = g_exp(g, b) in

  in(c, id: bitstring);        (* 接收 A 的身份 *)
  in(c, sigA: bitstring);      (* 接收 A 的签名 *)
  in(c, A_pub: group);         (* 接收 A 的公钥 *)

  let verified = checksig(sigA, pkA) in
  if verified = encode_group(A_pub) then
    let shared = h(mult(A_pub, B_pub)) in
    event beginB(encode_group(A_pub));
    out(c, B_pub);
    event endB(id, encode_group(B_pub), shared)
  else
    0.

(* === 主进程 === *)
process
  (!A) | (!B)






(*✅ 下一步建议
如果你计划进一步验证以下安全属性，我可以继续帮助你建模：

安全目标	对应扩展方式
KCI 抗性	模拟密钥泄露 attacker(skA)
前向保密（PFS）	使用 new 会话密钥、无长期密钥导出
完整 Key Confirmation	双向 begin/end 事件 + implication 查询
主动攻击（MITM）模型化	引入 attacker 控制部分信道

是如你后续希望加入：

KCI 抗性建模（Key Compromise Impersonation）；

前向保密（Forward Secrecy）；

双向 Key Confirmation；

主动攻击建模（如中间人攻击）；

--- 什么是具备等价推理语义
--- 什么是自动还原签名消息
--- 什么是认证属性（验证）
*)

(*
      equation 语句适用于“构造器-解构器”之间存在确定性等式的情况；

相较于 reduc，equation 更适合加密、签名、哈希等函数的建模；

reduc 通常用于带归约规则的破坏者分析（如异或、同态等），或者构造器自动推理；


*)
(*如需进一步实现 B 对 A 的身份签名返回给 A（以修复认证性缺失问题），我也可以继续为你添加。是否继续扩展 B 的身份认证？*)

(*
你提供的 ProVerif 代码与运行结果**可以作为一次密钥交换协议的课堂形式化验证报告的基础材料，并且相当充分**。以下是对其教学价值、完整性、改进空间的具体评估。

---

## ✅ 一、教学目标评估

### 你当前的材料完整涵盖了以下**课堂目标**：

| 教学目标       | 是否覆盖 | 说明                               |
| ---------- | ---- | -------------------------------- |
| **建模能力**   | ✅    | 正确建模了 DH + 签名机制协议，包括类型、函数、事件、查询等 |
| **安全属性定义** | ✅    | 明确验证了保密性、认证性、密钥一致性三类目标           |
| **验证操作**   | ✅    | 使用 ProVerif 成功运行，启用了攻击路径输出       |
| **攻击发现**   | ✅    | 能发现攻击并解释：缺少对 B 身份认证，导致中间人可插入公钥   |

---

## ✅ 二、从形式化验证角度评估你的 ProVerif 模型

| 项目            | 评价         | 说明                                                      |
| ------------- | ---------- | ------------------------------------------------------- |
| **形式化建模语法规范** | ⭐️⭐️⭐️⭐️⭐️ | 类型、构造函数、equation 写得标准、清晰                                |
| **事件设计**      | ⭐️⭐️⭐️⭐️   | 使用 `beginA/endA` 与 `beginB/endB` 合理区分角色视角，但 A 未认证 B 的身份 |
| **查询设计**      | ⭐️⭐️⭐️⭐️⭐️ | 查询清晰且语义有区分性（认证性 ≠ 一致性）                                  |
| **攻击检测**      | ⭐️⭐️⭐️⭐️⭐️ | 能确切定位中间人攻击发生点，给出路径（attacker(B\_pub) ⇒ endA(...)）        |
| **攻击追踪机制**    | ⭐️⭐️⭐️⭐️   | 设置 `set traceDisplay = long.` 并理解攻击者如何伪造 B 公钥           |

---

## 🧠 三、演示中可讲解的亮点

| 演示内容           | 推荐讲解方式                                         |
| -------------- | ---------------------------------------------- |
| **DH 协议的数学背景** | 简要介绍 `g^a`, `g^b`, `g^{ab}` 协商过程               |
| **事件与安全语义的匹配** | 举例解释：`endA` 是 A 认为密钥协商完成，而 `beginA` 是真正开始      |
| **认证失败的根源**    | 说明 A 无法验证 `B_pub` 是否来自真正的 B                    |
| **攻击者轨迹解析**    | 对照事件 `in(c, B_pub)` + attacker(B\_pub) ⇒ 插入伪造值 |

---

## ✅ 四、是否适合用于课堂 presentation？

| 要素                 | 是否满足                            |
| ------------------ | ------------------------------- |
| 是否展示协议流程           | ✅ 有事件流程图可讲                      |
| 是否引入形式化工具          | ✅ 使用了 ProVerif，且使用正确            |
| 是否发现实际攻击           | ✅ 中间人攻击成功被证明存在                  |
| 是否可视化展示            | ✅ 可以结合 GUI trace 或绘图讲解攻击轨迹      |
| 是否体现“验证-发现问题-改进”闭环 | ✅ 如果你愿意加个“修复版本”（比如 B 也签名），会更加完整 |

---

## ✅ 五、推荐改进建议（如想让 presentation 更加出彩）

| 建议                             | 收益                         |
| ------------------------------ | -------------------------- |
| 添加一张 **攻击路径图**（我可以帮你画）         | 直观讲解攻击者在哪一步伪造了 B\_pub      |
| **对比修复版本**：例如让 B 对 `B_pub` 签名  | 展示“如何通过身份认证机制弥补漏洞”         |
| 简要讲解 ProVerif 的查询逻辑与含义         | 强化听众对“event → event 推理”的理解 |
| 制作一个 **step-by-step GUI 截图序列** | 显示攻击轨迹每一阶段                 |

---

## ✅ 总结

| 评估维度  | 结论                      |
| ----- | ----------------------- |
| 材料完整性 | ✅ 完整并标准                 |
| 可理解性  | ✅ 对大多数信息安全背景学生友好        |
| 展示深度  | ✅ 包含攻击建模与验证             |
| 改进空间  | 🚀 可加“修复版本 + 攻击图”丰富展示层次 |

---

如你希望我帮助你：

* 生成**最终演示 PPT 框架**
* 绘制一张**中间人攻击时序图 / Graphviz 图**
* 或继续完成“带身份验证修复版”建模

欢迎继续，我可以立即配合。是否需要这些支持？
*)