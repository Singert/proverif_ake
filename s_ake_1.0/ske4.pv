(*支持签名验证的双向认证*)
(*✅ 加强认证策略：B 对 nb 签名，A 验签
核心思路：
引入非对称密钥机制：

B 拥有公私钥对 (pkB, skB)；

A 预知 B 的公钥 pkB；

B 发送 nb 时，附带签名 sign(nb, skB)；

A 在回应前使用 pkB 验证 nb 的签名；

只有通过签名验证，A 才认为挑战来自真正的 B。*)
(*
✅ 协议流程（非对称签名增强版）

A → B : A_ID
B → A : nb, Sign_B(nb)
A → B : {na, nb, sk}_k
B → A : {na}_k
*)
const A_ID: bitstring.

(* 类型定义 *)
type key.
type nonce.
type sessionkey.
type skey.       (* 签名私钥类型 *)
type pkey.       (* 签名公钥类型 *)

(* 类型转换器 *)
fun toBits(sessionkey): bitstring [typeConverter].
fun fromBits(bitstring): sessionkey [typeConverter].
fun nonceToBit(nonce): bitstring [typeConverter].

(* 公钥提取函数 *)
fun pk(skey): pkey.

(* 签名与验证函数 *)
fun sign(bitstring, skey): bitstring.
reduc forall m:bitstring, sk: skey;
      checksig(sign(m, sk), pk(sk)) = m.

(* 对称加密 *)
fun senc(bitstring, key): bitstring.
reduc forall k: key, m: bitstring;
      sdec(senc(m, k), k) = m.

(* 构造器与解构器 *)
fun pair(bitstring, bitstring): bitstring.
reduc forall x,y:bitstring; proj1(pair(x,y)) = x.
reduc forall x,y:bitstring; proj2(pair(x,y)) = y.

(* 公共通道与密钥 *)
free c: channel.
free k: key [private].         (* 对称加密密钥 *)
free pkB: pkey.                (* B 的公钥 *)
free skB: skey [private].      (* B 的私钥 *)

(* 事件定义 *)
event beginA(bitstring, bitstring, sessionkey).
event endB(bitstring, bitstring, sessionkey).
event beginB(bitstring).
event endA(bitstring, sessionkey).

(* 查询定义 *)
query attacker(new sk).
query na: bitstring, nb: bitstring, sk: sessionkey;
      event(endB(na, nb, sk)) ==> event(beginA(na, nb, sk)).
query na: bitstring, sk: sessionkey;
      event(endA(na, sk)) ==> event(beginB(na)).

(* A 的过程 *)
let A =
  out(c, A_ID);
  in(c, signed_nb: bitstring);
  let nb = checksig(signed_nb, pkB) in           (* 使用 pkB 验签 nb *)
  new na: nonce;
  new sk: sessionkey;
  event beginA(nonceToBit(na), nb, sk);
  let payload = pair(nonceToBit(na), pair(nb, toBits(sk))) in
  out(c, senc(payload, k));
  in(c, r: bitstring);
  let plain = sdec(r, k) in
  if plain = nonceToBit(na) then
    event endA(nonceToBit(na), sk)
  else
    0.

(* B 的过程 *)
let B =
  in(c, id: bitstring);
  new nb: nonce;
  event beginB(nonceToBit(nb));
  out(c, sign(nonceToBit(nb), skB));
  in(c, reply: bitstring);
  let payload = sdec(reply, k) in
  let na = proj1(payload) in
  let pair2 = proj2(payload) in
  let rcv_nb = proj1(pair2) in
  let sk = fromBits(proj2(pair2)) in
  if rcv_nb = nonceToBit(nb) then
    event endB(na, rcv_nb, sk);
    out(c, senc(na, k))
  else
    0.

(* 主进程 *)
process
  (!A | !B)
